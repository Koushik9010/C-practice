#include <stdio.h>
#include <stdlib.h>
#define MAX 100

// function prototypes
void create_graph(int adj_matrix[][MAX], int n);
void bfs(int adj_matrix[][MAX], int n, int start);
void dfs(int adj_matrix[][MAX], int n, int visited[], int vertex);

int main()
{
    int n, start;
    int adj_matrix[MAX][MAX], visited[MAX] = {0};
    
    // get the number of cities from the user
    printf("Enter the number of cities: ");
    scanf("%d", &n);
    
    // create the adjacency matrix
    create_graph(adj_matrix, n);
    
    // get the starting node from the user
    printf("Enter the starting city: ");
    scanf("%d", &start);
    
    // print all nodes reachable from the starting node using BFS
    printf("Nodes reachable from city %d using BFS method:\n", start);
    bfs(adj_matrix, n, start);
    
    // check whether the graph is connected or not using DFS
    dfs(adj_matrix, n, visited, start);
    for (int i = 0; i < n; i++)
    {
        if (!visited[i])
        {
            printf("Graph is not connected.\n");
            return 0;
        }
    }
    printf("Graph is connected.\n");
    return 0;
}

// function to create the adjacency matrix
void create_graph(int adj_matrix[][MAX], int n)
{
    int i, j;
    printf("Enter the adjacency matrix of the graph:\n");
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
        {
            scanf("%d", &adj_matrix[i][j]);
        }
    }
}

// function to perform BFS traversal of the graph
void bfs(int adj_matrix[][MAX], int n, int start)
{
    int queue[MAX], front = -1, rear = -1, i, u;
    int visited[MAX] = {0};
    
    // enqueue the starting node
    queue[++rear] = start;
    visited[start] = 1;
    
    while (front != rear)
    {
        // dequeue a node from the queue
        u = queue[++front];
        printf("%d ", u);
        
        // check for adjacent unvisited nodes and enqueue them
        for (i = 0; i < n; i++)
        {
            if (adj_matrix[u][i] == 1 && visited[i] == 0)
            {
                queue[++rear] = i;
                visited[i] = 1;
            }
        }
    }
    printf("\n");
}

// function to perform DFS traversal of the graph
void dfs(int adj_matrix[][MAX], int n, int visited[], int vertex)
{
    int i;
    visited[vertex] = 1;
    for (i = 0; i < n; i++)
    {
        if (adj_matrix[vertex][i] == 1 && visited[i] == 0)
        {
            dfs(adj_matrix, n, visited, i);
        }
    }
}




